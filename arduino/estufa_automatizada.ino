

//TCC - Mecatrônica 2018      Grupo: Óliver Pincelli Westin/ Marcelo Vinicius Teodoro/ Erik Adriano Romanelli/ 
//                                     João Victor Bueno de caldas/ Rafael dos Santos Domingues Costa /                      Estufa Automática 

//***************************************************************************************//*************************************************************************************// 

#include "Limits.h"
#include <PCD8544.h>
#include <Arduino.h>
#include <Wire.h>
#include <MicroLCD.h>
#include <Adafruit_Sensor.h>
#include <DHT.h>
#include <DHT_U.h>
#include <DS3231.h>
#include <math.h>

#define DHTPIN A2                             // Pino DHT 11
#define DHTTYPE DHT11                         // DHT 11 (Módulo de temperatura)
#define pino_sinal_analogico A1              //Pino do módulo sensor de umidade
#define pinopot  A0                         //Pino do sensor LDR de luminosidade

Time t;

//CONFIGURACAO DO DISPLAY MICRO LCD
LCD_SSD1306 lcd;             // para módulo contralado pelo CI SSD1306 OLED
DHT dht(DHTPIN, DHTTYPE);
DS3231  rtc(SDA, SCL);      //Para módulo de tempo


  int valorpot ;                           // Armazena valor lido de 0 até 1023
  float luminosidadelcd = 0;               // Valor luminosidade do lcd 
  int luzambiente;
  int valor_analogico;                    //Valor de umidade lido
  int botao;                             // Lê o estado do botão

  
    
const unsigned char PROGMEM agua [] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xC0, 0xC0, 0xE0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xE0,
0xF0, 0xF8, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFB, 0xFE, 0xFC, 0xF0, 0xE0, 0xC0,
0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xF8, 0xFE, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFE, 0xFC, 0xF0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F,
0x07, 0x0F, 0x3F, 0x7D, 0xCB, 0xF7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0F, 0x3F, 0x7F, 0xFF, 0xFF,
0xFE, 0xFC, 0xF8, 0xF8, 0xF8, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0x7F, 0x3F, 0x0F, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x01, 0x01, 0x03, 0x03, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x03, 0x03, 0x03, 0x01,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char PROGMEM logo [] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0,
0xE0, 0xE0, 0xF0, 0xF0, 0xF0, 0xE0, 0xE0, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF0, 0xFF, 0xFC, 0x30, 0x1C, 0x0F, 0x1F, 0x3B, 0x7D,
0xFE, 0xFE, 0xFE, 0xFC, 0xF9, 0xF3, 0xC7, 0x1F, 0xFF, 0xFF, 0xFC, 0xC0, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0x78, 0x38, 0xB8, 0xB8, 0xB8, 0x78, 0xF0, 0xE0,
0xC0, 0x00, 0x80, 0xE0, 0xF0, 0xF8, 0x1F, 0x1F, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x01, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x1F, 0x3F, 0x7F, 0x1F, 0x07, 0x00, 0x00, 0x00, 0x00,
0x00, 0x7C, 0xFF, 0xFF, 0xFF, 0xFF, 0xF3, 0xF9, 0xFC, 0x7F, 0x7F, 0x7F, 0x7F, 0x3E, 0x3E, 0x1F,
0x0F, 0x06, 0x1F, 0x3F, 0xFF, 0xF8, 0xC0, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0x70, 0x78, 0x78,
0x78, 0xF8, 0xF8, 0xF8, 0xF8, 0xE0, 0xE0, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x03, 0x0F, 0x0F, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFE, 0x86, 0x07, 0x0F, 0x3E, 0x7E, 0x7F, 0xFF, 0xFF,
0xFF, 0xFE, 0xFE, 0xFD, 0xFB, 0xFB, 0x7B, 0x3B, 0x3F, 0x3E, 0x1E, 0x0C, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x3F, 0x3F, 0x3F, 0x30, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char PROGMEM relogio [] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x40, 0x40, 0xA0, 0xA0,
0xD0, 0xD0, 0xD0, 0xE8, 0xE8, 0xE8, 0xE8, 0x68, 0x68, 0xE8, 0xE8, 0xE8, 0xE8, 0xD0, 0xD0, 0xD0,
0xA0, 0xA0, 0x40, 0x40, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0xC0, 0x60, 0x98, 0xEC, 0xF6, 0xFB, 0xFD, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFD, 0xFB, 0xF6, 0xEC, 0x98, 0x70, 0xC0, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0xF8, 0x07, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x1F, 0x8F, 0xC7, 0xE3, 0xF1, 0xF9, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xF1, 0x0F, 0xF8, 0x00, 0x00,
0x00, 0x00, 0x0F, 0x70, 0x8F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0xC7, 0x78, 0x0F, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x0C, 0x1B, 0x37, 0x6F, 0xDF, 0xBF, 0x7F, 0x7F, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0x7F, 0x7F, 0xBF, 0xDF, 0x6F, 0x37, 0x1B, 0x0C, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02,
0x05, 0x05, 0x05, 0x0D, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0D, 0x05, 0x05, 0x05,
0x02, 0x02, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


const unsigned char PROGMEM calendario [] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x01, 0xFE, 0x01, 0x01, 0x01, 0x09, 0x09,
0x09, 0x01, 0x19, 0x45, 0x49, 0x39, 0x05, 0x05, 0x01, 0x49, 0x49, 0x49, 0x39, 0x01, 0x01, 0x01,
0x01, 0x01, 0x01, 0x01, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x02, 0x02, 0x02, 0x02, 0x02,
0x02, 0x02, 0x02, 0x02, 0x02, 0x82, 0x42, 0x22, 0xE2, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
0x02, 0x02, 0x02, 0x02, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x80, 0x7F, 0x40, 0x40, 0x40, 0x40, 0x40,
0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x43, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40,
0x40, 0x40, 0xC0, 0xC0, 0xE1, 0x22, 0x14, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};



const unsigned char PROGMEM termometro [] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30,
0x20, 0x20, 0x60, 0x00, 0x80, 0x40, 0xA0, 0xA0, 0x20, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x70,
0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x0C, 0x08, 0x08, 0x08,
0x08, 0x00, 0xFE, 0x01, 0xFE, 0xFF, 0xFF, 0xFF, 0x00, 0x88, 0x88, 0x89, 0xFE, 0x00, 0x00, 0x04,
0x06, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x88, 0x88, 0x88, 0xFF, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
0x40, 0x20, 0x1F, 0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0xE8, 0xC8, 0x88, 0x1F, 0x20, 0xC0, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F,
0x30, 0x40, 0x8F, 0x1F, 0x3F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x3F, 0x1F, 0x8F, 0x40, 0x30, 0x0F,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x02, 0x02, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char PROGMEM luz [] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
0x80, 0x40, 0x40, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0x40, 0x40, 0x80, 0x80, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x30, 0xCC, 0x32, 0x0D, 0x02,
0x02, 0x01, 0x01, 0x80, 0x80, 0x00, 0x00, 0x00, 0x80, 0x80, 0x01, 0x01, 0x02, 0x02, 0x0D, 0x32,
0xCC, 0x30, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x60, 0x9F, 0x60, 0x80, 0x00,
0x00, 0x02, 0x07, 0x04, 0x04, 0xFF, 0x00, 0xFF, 0x04, 0x04, 0x07, 0x02, 0x00, 0x00, 0x80, 0x60,
0x9F, 0x60, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x05, 0x1A,
0x24, 0xE8, 0x18, 0xF0, 0x20, 0xFF, 0xE0, 0xFF, 0x20, 0xF0, 0x18, 0xE8, 0x24, 0x1A, 0x05, 0x02,
0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xCC, 0x73, 0x3E, 0xCF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xCF, 0x3E, 0x73, 0xCC, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x01, 0x01, 0x03, 0x03, 0x07, 0x07, 0x07, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

 
void setup() {

  Serial.begin(115200);
  
  lcd.begin();
  
  Serial.begin(9600);
  pinMode(pino_sinal_analogico, INPUT);        //Declarando pinos de entrada e saída
  pinMode(2, OUTPUT);                         //Sensor fora do solo
  pinMode (pinopot, INPUT);                  //Porta ligada ao sensor LDR
  
  pinMode (22, OUTPUT);                         //Relé lâmpada 1   (Luminosidade)
  pinMode (23, OUTPUT);                        //Relé lâmpada 2    (Luminosidade)
  pinMode (52, OUTPUT);                       //Relé Bomba         (Umidade do solo)
  pinMode (53, OUTPUT);                      //Relé Cooler         (Temperatura)
  pinMode (51, OUTPUT);                     // Buzer
 
  pinMode (7, INPUT_PULLUP);                //Botão (liga display)
  Serial.println("TCC - Estufa");

  // Inicialização do RTC e DHT
  rtc.begin();
  dht.begin();

  // Ajustes do relógio e calendário
  //rtc.setTime(11, 53, 40);     // Set the time to 12:00:00 (24hr format)
  //rtc.setDate(18, 4, 2018);   // Set the date to January 1st, 2014

  //Plantinha Logo TCC  
  lcd.setCursor(40,1);
  lcd.draw(logo,48,48);
  delay(4000);
  lcd.clear();

}

//****************************************************************************************//************************************************************************************//
void loop() {

  botao = digitalRead (7);
  t = rtc.getTime();

if (botao){

   //Calendario ==> Display
  Serial.println("    ");
  titulo();
  lcd.setCursor(0, 2);
  lcd.draw(calendario,48,48);
  setFont();
  Serial.print("  Data: ");
  Serial.println(rtc.getDateStr());
  lcd.println(rtc.getDateStr());
  delay(3000);

  //Horário
  titulo();
  lcd.setCursor(0, 2);
  lcd.draw(relogio,48,48);
  lcd.setCursor(70,4);
  lcd.setFontSize(FONT_SIZE_LARGE);
  lcd.print(t.hour,DEC);
  lcd.print(":");
  if(t.min<10){ lcd.print("0"); }
  lcd.print(t.min, DEC);
  Serial.print("  Horário: ");
  Serial.println(rtc.getTimeStr());
  delay(3000);  

  //****************************************************************************************//************************************************************************************//

  
//Linha da Luminosidade
//Luminosidade ==> CMD

  valorpot = analogRead(pinopot);

  luminosidadelcd = map(valorpot, 0, 1023, 0, 255);
  Serial.print("  Valor lido do LDR : ");
  Serial.println(valorpot);

  luzambiente = map(valorpot, 0, 1023, 0, 100);
  Serial.print("  Luminosidade : ");
  Serial.print(map(valorpot, 0, 1023, 0, 100));
  Serial.println(" %");

// Display

  luzambiente = map(valorpot, 0, 1023, 0, 100);
  titulo();
  lcd.setCursor(0,2);
  lcd.draw(luz,48,48);
  lcd.setCursor(45,4);
  lcd.setFontSize(FONT_SIZE_SMALL);
  lcd.print(" Luminosidade:");
  pula();
  lcd.print(luzambiente);
  lcd.print("%");
  delay(3000);
  

//****************************************************************************************//************************************************************************************//

// Sensor de umidade do solo

  valor_analogico = analogRead(pino_sinal_analogico);           //Le o valor do pino A1 do sensor
  valor_analogico = map(valor_analogico, 1023, 0, 0, 100);

  //Mostra o valor da porta analogica no serial monitor
  Serial.print("  Umidade solo: ");
  Serial.print(valor_analogico);
  Serial.println("%");

    titulo();
  lcd.setCursor(0, 2);        //Gota no display
  lcd.draw(agua,48,48);     
  setFont();
 
  if (valor_analogico > 70 && valor_analogico <= 100)
  {
  Serial.println("  Status: Solo umido");
  
  lcd.setCursor(78,4);
  lcd.setFontSize(FONT_SIZE_SMALL);
  lcd.print("Umido");                            // solo umido
  pula();
  lcd.print(valor_analogico);
  lcd.print("%");
  delay(3000);
  }
 
  if (valor_analogico > 30 && valor_analogico < 69)
  {
    Serial.println("  Status: Umidade moderada");
  
  setFont(); 
  lcd.print("Equilibrado");                                
  pula();                                           // solo equilibrado
  lcd.print(valor_analogico);
  lcd.print("%");
  delay(3000);
  }

  if (valor_analogico >= 15 && valor_analogico < 29)
  {
    Serial.println("  Status: Solo seco");
  
  setFont();  
  lcd.print("Solo seco");                                // solo seco
  pula();
  lcd.print(valor_analogico);
  lcd.print("%");
  delay(3000);
  }

  if (valor_analogico >= 0 && valor_analogico < 2)   
  {
  lcd.print("Sensor fora");
  pula();
  lcd.print("do solo!");
  digitalWrite (2, HIGH);
  delay (3000);                                          // sensor fora do solo
  digitalWrite (2, LOW);
  }


  //****************************************************************************************//************************************************************************************//
 
      
      //Temperatura
  
  int h = dht.readHumidity();            //Valor da umidade relativa do ar
  int t = dht.readTemperature();         //Valor da temperatura
  
  titulo();
  lcd.setCursor(0, 2);
  lcd.draw(termometro,48,48);
  setFont();
  
  if (isnan(t) || isnan(h)) 
  {
    Serial.println("  Falha ao ler DHT");
    lcd.print("Falha ao ler");
    pula();
    lcd.print("DHT");
  } 
  else 
  {
    Serial.print("  Umidade do AR: ");
    Serial.print(h);
    Serial.println("% ");                                    //Monitor serial
    Serial.print("  Temperatura: ");
    Serial.print(t);
    Serial.print(" °C");
    Serial.println("          ");

    lcd.print("Temperatura:");
    pula();
    lcd.print(t);
    lcd.print("'C");
  }
  delay(3000); 
  lcd.clear();
}

//********************************************************************************//**********************************************************************************************//
//*******************************************************************************//***********************************************************************************************//

else (botao);{

   /*//Calendario ==> Displa
  Syerial.println("    ");
  titulo();
  lcd.setCursor(0, 2);
  lcd.draw(calendario,48,48);             
  setFont();
  Serial.print("  Data: ");
  Serial.println(rtc.getDateStr());
  lcd.println(rtc.getDateStr());
  delay(3000);

  //Horário
  titulo();
  lcd.setCursor(0, 2);
  lcd.draw(relogio,48,48);                                        Parte ignorada por razões técnicas
  lcd.setCursor(70,4);
  lcd.setFontSize(FONT_SIZE_LARGE);
  lcd.print(t.hour,DEC);
  lcd.print(":");
  if(t.min<10){ lcd.print("0"); }
  lcd.print(t.min, DEC);
  Serial.print("  Horário: ");
  Serial.println(rtc.getTimeStr());
  delay(3000);  */

  //****************************************************************************************************************************************************************************

  
//Linha da Luminosidade
//Luminosidade ==> CMD

  valorpot = analogRead(pinopot);
  luzambiente = map(valorpot, 0, 1023, 0, 100);

// Reação da leitura

  if ((map(valorpot,0,1023, 0, 100))< 40){
    digitalWrite(20, HIGH);
}
 valorpot = analogRead(pinopot);
 
  if ((map(valorpot,0,1023, 0, 100))< 60){
    digitalWrite(21, HIGH);
 }
  else ((map(valorpot,0,1023, 0, 100))< 60);{
    digitalWrite (21, LOW);
  }
  

//****************************************************************************************************************************************************************************

// Sensor de umidade do solo

   valor_analogico = analogRead(pino_sinal_analogico);           //Le o valor do pino A1 do sensor
   valor_analogico = map(valor_analogico, 1023, 0, 0, 100);
   Serial.print(valor_analogico);

if (valor_analogico < 40);{

  while (valor_analogico >= 0 && valor_analogico <= 50){

    digitalWrite (52, HIGH);          // Ativa a irrigação   
    
    titulo();
    lcd.setCursor(0, 2);            //Gota no display
    lcd.draw(agua,48,48);
    setFont();
    lcd.setCursor(51,4);
    lcd.print("Bomba ligada");
    delay (3000);
    digitalWrite (52, LOW);
  
    valor_analogico = analogRead(pino_sinal_analogico);           //Le o valor do pino A1 do sensor novamente
    valor_analogico = map(valor_analogico, 1023, 0, 0, 100);

    if (valor_analogico > 50 && valor_analogico <= 100){          // se o solo estiver umido 
  
      irrigacaoConcluida();              //Void Irrigação Concluída
      lcd.print(valor_analogico); 
    } 
  }
}
if (valor_analogico >= 50 && valor_analogico <= 100);{
  lcd.clear();
}
  
if (valor_analogico >= 0 && valor_analogico < 2)   // sensor fora do solo
  {

  digitalWrite (2, HIGH);
  delay (100);                                          
  digitalWrite (2, LOW);
  }


  //****************************************************************************************************************************************************************************
 
      
 /*     //Temperatura
  
  int h = dht.readHumidity();            //Valor da umidade relativa do ar
  int t = dht.readTemperature();         //Valor da temperatura
  
   titulo();
  lcd.setCursor(0, 2);
  lcd.draw(termometro,48,48);
  setFont();
  
  if (isnan(t) || isnan(h)) 
  {
    Serial.println("  Falha ao ler DHT");
    lcd.print("Falha ao ler");
    pula();
    lcd.print("DHT");
  } 
  else 
  {
   
  
}*/
}
}
void titulo(){
  //Mostra o titulo pra quando a tela for limpa
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.setFontSize(FONT_SIZE_XLARGE);
  lcd.println("TCC - Estufa");
}

void setFont(){
  //Define fonte como tamanho pequeno
  lcd.setCursor(52,4);
  lcd.setFontSize(FONT_SIZE_SMALL);
}

void setFont2(){
  //Define a fonte como tamanho médio
  lcd.setCursor(52,4);
  lcd.setFontSize(FONT_SIZE_LARGE);
}

void pula(){
  //Pula da linha 4 para a 5
  lcd.setCursor(80,5);
  lcd.setFontSize(FONT_SIZE_SMALL);
}
void irrigacaoConcluida (){
  //Mostra no display que a 
  //irrigação foi finalizada
  titulo();
  lcd.setCursor(0, 2);            
  lcd.draw(agua,48,48);
  setFont();
  lcd.setCursor(51,4);
  lcd.print("Solo irrigado");                                
  delay(3000);
  lcd.clear();                                           
  titulo();
  lcd.setCursor(0, 2);            
  lcd.draw(agua,48,48);
  setFont();
  lcd.print("Umidade em:");
  pula();
  lcd.print(valor_analogico);
  lcd.print("%");
  delay(3000);
  
}


